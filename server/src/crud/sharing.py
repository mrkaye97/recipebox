# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.28.0
# source: sharing.sql
import datetime
import uuid
from collections.abc import AsyncIterator

import pydantic
import sqlalchemy
import sqlalchemy.ext.asyncio

from src.crud import models

CREATE_RECIPE_SHARE_REQUEST = """-- name: create_recipe_share_request \\:one
INSERT INTO recipe_share_request (
    recipe_id,
    to_user_id,
    expires_at
)
VALUES (
    :p1\\:\\:UUID,
    :p2\\:\\:UUID,
    :p3\\:\\:TIMESTAMPTZ
)
RETURNING to_user_id, recipe_id, created_at, expires_at
"""


DELETE_SHARING_REQUEST = """-- name: delete_sharing_request \\:one
DELETE FROM recipe_share_request
WHERE
    recipe_id = :p1\\:\\:UUID
    AND to_user_id = :p2\\:\\:UUID
RETURNING to_user_id, recipe_id, created_at, expires_at
"""


LIST_PENDING_RECIPE_SHARE_REQUESTS = """-- name: list_pending_recipe_share_requests \\:many
SELECT
    r.name AS recipe_name,
    u.name AS from_user_name,
    u.email AS from_user_email
FROM recipe_share_request rsr
JOIN recipe r ON rsr.recipe_id = r.id
JOIN "user" u ON r.user_id = u.id
WHERE rsr.to_user_id = :p1\\:\\:UUID
AND rsr.expires_at > NOW()
ORDER BY rsr.created_at DESC
"""


class ListPendingRecipeShareRequestsRow(pydantic.BaseModel):
    recipe_name: str
    from_user_name: str
    from_user_email: str


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_recipe_share_request(
        self, *, recipeid: uuid.UUID, touserid: uuid.UUID, expiresat: datetime.datetime
    ) -> models.RecipeShareRequest | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(CREATE_RECIPE_SHARE_REQUEST),
                {"p1": recipeid, "p2": touserid, "p3": expiresat},
            )
        ).first()
        if row is None:
            return None
        return models.RecipeShareRequest(
            to_user_id=row[0],
            recipe_id=row[1],
            created_at=row[2],
            expires_at=row[3],
        )

    async def delete_sharing_request(
        self, *, recipeid: uuid.UUID, touserid: uuid.UUID
    ) -> models.RecipeShareRequest | None:
        row = (
            await self._conn.execute(
                sqlalchemy.text(DELETE_SHARING_REQUEST),
                {"p1": recipeid, "p2": touserid},
            )
        ).first()
        if row is None:
            return None
        return models.RecipeShareRequest(
            to_user_id=row[0],
            recipe_id=row[1],
            created_at=row[2],
            expires_at=row[3],
        )

    async def list_pending_recipe_share_requests(
        self, *, touserid: uuid.UUID
    ) -> AsyncIterator[ListPendingRecipeShareRequestsRow]:
        result = await self._conn.stream(
            sqlalchemy.text(LIST_PENDING_RECIPE_SHARE_REQUESTS), {"p1": touserid}
        )
        async for row in result:
            yield ListPendingRecipeShareRequestsRow(
                recipe_name=row[0],
                from_user_name=row[1],
                from_user_email=row[2],
            )
